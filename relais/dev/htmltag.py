#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Simple generation of HTML tags.

These are a few dirt-simple functions for generating html, handling the generation of opening, closing and closed tags with attributes. This is
suitable (and useful) for building up small fragments of HTML. More
sophisticated toolkits and templates should be used for larger problems.

For ease of use, attributes are passed as raw keyword arguments. It thus
becomes necessary to find a way to pass attributes that are also reserved
words in python (e.g. "class") This is done by adding an underscore suffix.
Such terminal underscores are stripped and names converted to lowercase. This
"sanitizing" is also done for tag names. Thus "class" can be passed in as
"class_" (or "CLASS" or "CLASS_").

Note unicode is generated by all functions. Also note that attribute values
are not sanitized and are enclosed by double quotes, i.e.
``class="my-class"``. Should attribute values themselves contain quotes, this
should be kept in mind. Finally, the ordering of attributes in the final tag
is not guaranteed or consistent.

"""

__docformat__ = 'restructuredtext en'


### IMPORTS ###

__all__ = [
	'start_tag',
	'stop_tag',
	'closed_tag',
	'tag_with_contents',
]

### CONSTANTS & DEFINES ###

### IMPLEMENTATION ###	

def start_tag (tag, **kwargs):
	"""
	Return the opening tag for an element, with attributes.
	
	:Parameters:
		tag : string
			The tag for the element, e.g. "div", which is sanitized before
			rendering.
		kwargs
			Keyword arguments and values are interpreted as attributes, after
			sanitizing.
			
	:Returns:
		A unicode string.
		
	For example::
	
		>>> start_tag ('div')
		u'<div>'
		>>> start_tag ('DIV', class_='Strong_')
		u'<div class="Strong_">'
		
	"""
	text = u'<%s' % sanitize_name (tag)
	att_text = _build_attribs (kwargs)
	if (att_text):
		text += " %s" % att_text
	return text + '>'


def stop_tag (tag):
	"""
	Return the closing tag for an element.
	
	:Parameters:
		tag : string
			The tag for the element, e.g. "div", which is sanitized before
			rendering.
			
	:Returns:
		A unicode string.
		
	For example::
	
		>>> stop_tag ('div')
		u'</div>'
		>>> stop_tag ('DIV')
		u'</div>'
	
	"""
	return u'</%s>' % sanitize_name (tag)


def closed_tag (tag, **kwargs):
	"""
	Return the tag for an closed element, with attributes.
	
	:Parameters:
		See `start_tag`.
			
	:Returns:
		A unicode string.
		
	For example::
	
		>>> closed_tag ('div')
		u'<div />'
		>>> closed_tag ('DIV', class_='Strong_')
		u'<div class="Strong_" />'
		
	"""
	text = u'<%s' % sanitize_name (tag)
	att_text = _build_attribs (kwargs)
	if (att_text):
		text += " %s" % att_text
	return text + ' />'
	
	
def tag_with_contents (tag, contents, **kwargs):
	"""
	Return the opening and closing tags for an element, with contents.
	
	:Parameters:
		tag : string
			The tag for the element, e.g. "div", which is sanitized before
			rendering.
		contents : string
			Text to insert between the opening and closing tags.
		kwargs
			Keyword arguments and values are interpreted as attributes, after
			sanitizing.
			
	:Returns:
		A unicode string.
		
	For example::
	
		>>> closed_tag ('div', 'foo')
		u'<div>foo</div>'
		>>> closed_tag ('DIV', 'bar', class_='Strong_')
		u'<div class="Strong_">bar</div>'
		
	This could also be used to generate a tag that is later formatted. For
	example::
	
		>>> x = closed_tag ('div', '%s')
		>>> x
		u'<div>%s</div>'
		>>> x % 'foo'
		u'<div>foo</div>'
		
	"""
	return start_tag (tag, **kwargs) + contents + stop_tag (tag)
	

def sanitize_name (name):
	"""
	Reduce a obsfucated name to its correct form.
	
	:Parameters:
		name : string
			A tag or attribute name
			
	:Returns:
		A trimmed, lowercase version of the name.
		
	Given the functions in the module pass element attributes as raw keyword
	arguments, it it necessary to find a way to pass attributes that are also
	reserved words in python. This is done by adding an underscore suffix. Such
	terminal underscores are stripped and names converted to lowercase.
	
	For example::
	
		>>> sanitize_name ('style')
		'style'
		>>> sanitize_name ('class_')
		'class'
		>>> sanitize_name ('CLASS__')
		'class_'		
		
	"""
	name = name.lower()
	if (name.endswith ('_')):
		name = name[:-1]
	return name


def _build_attribs (att_dict):
	"""
	Build the text for the attributes of a tag.
	
	:Parameters:
		att_dict : mapping
			Attribute-value pairs.
	
	:Returns:
		A unicode string of 
	"""
	atts = [u'%s="%s"' % (sanitize_name (a), b) for a, b in
		att_dict.iteritems()]
	return ' '.join (atts)	
	
### TEST & DEBUG ###

def _doctest ():
	import doctest
	doctest.testmod ()


### MAIN ###

if __name__ == '__main__':
	main()


### END ######################################################################
